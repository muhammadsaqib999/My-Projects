# -*- coding: utf-8 -*-
"""MNIST Hand Written Digit Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PHiFGDkkR04hxyQgDqw--5RcDeH2ETs

**MNIST Hand Written Digit Classification Deep Learning**
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist
from tensorflow.math import confusion_matrix

"""**Loading MNIST data from keras dataset**"""

(x_train,y_train),(x_test,y_test)=mnist.load_data()

type(x_train)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

x_train[2]

plt.imshow(x_train[25])
plt.show()
print(y_train[25])

print(np.unique(y_train))
print(np.unique(y_test))

"""**Scaling**"""

x_train=x_train/255
x_test=x_test/255

x_train[10]

"""**Make Artificial Neural Network**"""

model=keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=10)

"""**Training Accuracy is 98.97%**

**Test Accuracy **
"""

loss,accuracy=model.evaluate(x_test,y_test)*100
print(accuracy)

"""**Test Accuracy is 96.89%**"""

plt.imshow(x_test[8]) #This is the predicted value at index number 8th
plt.show()
print(y_test[8])

print(y_test[8]) #This is actual value at index number 8th

y_pred=model.predict(x_test)
print(y_pred.shape)

y_pred[8]

label_for_test_image=np.argmax(y_pred[8]) #ye sirf check krna he k max value sahi print hoti he ya nhi just .
print(label_for_test_image)

y_pred_labels=[np.argmax(i) for i in y_pred] #This is for all dataset .
print(y_pred_labels)

"""**Confusion Matrix**"""

con_matrix=confusion_matrix(y_test,y_pred_labels) # "y_test" is the Actual values while "y_pred_labels" is the predicted values
print(con_matrix)

plt.figure(figsize=(12,7))
sns.heatmap(con_matrix,annot=True,fmt='d',cmap='Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

"""**Making input system for upcoming images**"""

input_image_path=input("Enter the image path that you want to Predict : ")

input_image=cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale_image=cv2.cvtColor(input_image,cv2.COLOR_RGB2GRAY)

input_image_resize=cv2.resize(grayscale_image,(28,28))

input_image_resize=input_image_resize/255

image_reshape=np.reshape(input_image_resize,[1,28,28])

input_prediction=model.predict(image_reshape.reshape(1,28,28))

input_prediction_label=np.argmax(input_prediction)

print("The Handwritten Digit is Recognized as : ",input_prediction_label)

import pickle

f='my_data.sav'
pickle.dump(model,open(f,'wb'))

lod=pickle.load(open(f,'rb'))

input_image_path=input("Enter the image path that you want to Predict : ")

input_image=cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale_image=cv2.cvtColor(input_image,cv2.COLOR_RGB2GRAY)

input_image_resize=cv2.resize(grayscale_image,(28,28))

input_image_resize=input_image_resize/255

image_reshape=np.reshape(input_image_resize,[1,28,28])

input_prediction=lod.predict(image_reshape.reshape(1,28,28))

input_prediction_label=np.argmax(input_prediction)

print("The Handwritten Digit is Recognized as : ",input_prediction_label)

